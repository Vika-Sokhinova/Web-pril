<?php 
    header('Content-type: text/html; charset=utf-8');
?>
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="Протокол HTTP история, HTTP транзакции: Request\Response, HTTP Status коды, HTTP Header'ы, версии стандарта HTTP">
    <meta name="author" content="Burtsev Yuriy, Gusteneva Daria, Sohinova Viktoria">
    <link rel="shortcut icon" href="favicon.ico">

    <title>Домашнее задание</title>

    <link href="/css/bootstrap.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <script src="/js/bootstrap.js"></script>
    <script src="/js/jquery-1.8.3.js"></script>
  

  </head>

  <body>

    <div class="navbar navbar-inverse navbar-fixed-top" role="navigation">
      <div class="container-fluid">
        <div class="navbar-header">
          <a class="navbar-brand">"Разработка WEB приложений" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Группа РИ-320401</a>
        </div>
        <div class="navbar-collapse collapse">
          <ul class="nav navbar-nav navbar-right">
            <li><a href="http://intobservatory.ru/" target="_blank">Бесплатный хостинг</a></li>
            <li><a href="https://github.com/intobs/dev_web_urfu" target="_blank">Исходники</a></li>
          </ul>
        </div>
      </div>
    </div>

    <div class="container-fluid">
      <div class="row">
        <div class="col-sm-3 col-md-2 sidebar">
          <ul class="nav nav-list bs-docs-sidenav ">
            <li><a href="#task">Постановка задачи</a></li>
            <li><a href="#history">История HTTP</a></li>
            <li><a href="#transaction">HTTP транзакции</a></li>
            <li><a href="#status_code">HTTP Status коды (ответы)</a></li>
            <li><a href="#header-method">HTTP Header'ы (заголовки)</a></li>
            <li><a href="#info">Информация</a></li>
          </ul>
        </div>
        <div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main">
          <h1 class="page-header">Домашнее задание №1</h1>
        <section id="task">
            <div class="box box-info">
                <div class="box-header">
                    <h3 class="box-title">Постановка задачи</h3>
		</div>
                
		<div class="box-body">
                    <p>Подготовить доклад об HTTP-протоколе. <br>
                    <ul>
                        <li>Рассказать об истории возникновения и развития</li>
                        <li>Рассказать про HTTP-Транзакции</li>
                        <li>Привести список статус-кодов</li>
                        <li>Привести список header'ов</li>
                    </ul>
                    </p>
		</div>
                
            </div>
        </section>
        <section id="history">
            <div class="box box-info">
                <div class="box-header">
                    <h3 class="box-title">История HTTP протокола</h3>
		</div>
                
		<div class="box-body">
                    <p> 
                        <b>HTTP</b> (<i>HyperText Transfer Protocol</i>) – один из наиболее важных протоколов, который обеспечивает передачу данных через интернет. <br>
                        Протокол HTTP находится на седьмом, прикладном уровне модели OSI и работает на основе протокола TCP.
                    </p>
                    <p> 
                        Поскольку протокол HTTP находится на прикладном уровне, прикладные приложения могут использовать непосредственно его для организации сетевого взаимодействия. <br>
                        Кроме того, протокол HTTP является важнейшей частью веб-приложений. <br>
                        В этом случае браузер, используя возможности HTTP, взаимодействует с сервером для получения необходимых данных.
                    </p>
                    <p> 
                        Протокол HTTP предполагает передачу данных в режиме "запрос-ответ". <br>
                        При этом в рамках такого взаимодействия могут передаваться данные практически любого типа – обычный текст, гипертекст (HTML), таблицы стилей, клиентские сценарии, изображения, документы в различных форматах, бинарная информация и т.д.
                    </p>
                    <p>
                        В рамках протокола HTTP всегда четко выделяется клиент и сервер. Клиент всегда является инициатором взаимодействия. <br>
                        Сервер, в свою очередь, прослушивает все входящие соединения и обрабатывает каждое из них. <br>
                        Поскольку HTTP-взаимодействие функционирует по схеме "запрос-ответ", то для инициации сеанса передачи данных необходимо сгенерировать HTTP-запрос. <br>
                        В рамках этого запроса клиент описывает то, какой ресурс он хочет получить от сервера, а также указывает различные дополнительные параметры. <br>
                        После этого запрос отправляется серверу и тот, в свою очередь, обрабатывает запрос и генерирует HTTP-ответ, в котором содержится служебная информация и содержимое того ресурса, который был запрошен.
                    </p>
		<div class="bs-example">
                    <ul class="nav nav-tabs" style="margin-bottom: 15px;">
                        <li class="active"><a href="#09" data-toggle="tab">HTTP 0.9</a></li>
                        <li><a href="#10" data-toggle="tab">HTTP 1.0</a></li>
                        <li><a href="#11" data-toggle="tab">HTTP 1.1</a></li>
                        <li><a href="#20" data-toggle="tab">HTTP 2.0</a></li>
                    </ul>
		<div id="myTabContent" class="tab-content">
                    <div class="tab-pane fade active in" id="09">
                        <div class="box box-solid">
                            <div class="box-body">
				<p>
                                    HTTP был предложен в марте 1991 года Тимом Бернерсом-Ли, работавшим тогда в CERN, как механизм для доступа к документам в Интернете и облегчения навигации посредством использования гипертекста. <br>
                                    Самая ранняя версия протокола HTTP/0.9 была впервые опубликована в январе 1992 г. (хотя реализация датируется 1990 годом).<br> 
                                    Спецификация протокола привела к упорядочению правил взаимодействия между клиентами и серверами HTTP, а также чёткому разделению функций между этими двумя компонентами. <br>
                                Были задокументированы основные синтаксические и семантические положения.
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="10">
                        <div class="box box-solid">
                            <div class="box-body">
                                <p>В мае 1996 года для практической реализации HTTP был выпущен информационный документ RFC 1945, что послужило основой для реализации большинства компонентов HTTP/1.0.</p>    
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="11">
                        <div class="box box-solid">
                            <div class="box-body">
				<p>Принята в июне 1999 года. <br>
                                    Новым в этой версии был режим «постоянного соединения»: TCP-соединение может оставаться открытым после отправки ответа на запрос, что позволяет посылать несколько запросов за одно соединение. <br>
                                    Клиент теперь обязан посылать информацию об имени хоста, к которому он обращается, что сделало возможной более простую организацию виртуального хостинга. 
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="20">
                        <div class="box box-solid">
                            <div class="box-body">
                                <p>
                                11 февраля 2015 года опубликованы финальные версии черновика следующей версии протокола. <br>
                                В отличие от предыдущих версий, протокол HTTP/2 является бинарным. <br>
                                Среди ключевых особенностей мультиплексирование запросов, расстановка приоритетов для запросов, сжатия заголовков, загрузка нескольких элементов параллельно, посредством одного TCP соединения, поддержка проактивных push уведомлений со стороны сервера.
                                </p>    
                            </div>
                        </div>
                    </div>
                </div>
                </div>
                </div>
        </div>
        </section>
        <section id="transaction">
            <div class="box box-info">
                <div class="box-header">
                    <h3 class="box-title">HTTP транзакции: Request\Response</h3>
		</div>
		<div class="box-body">
                    <p>
                        Все HTTP-транзакции имеют один общий формат. <br>
                        Каждый запрос клиента и ответ сервера состоит из трех частей: строки запроса (ответа), раздела заголовка и тела. <br>
                        Клиент инициирует транзакцию в 4 этапа<hr>
                    </p>
                            <div class="tabbable tabs-left">
                                <ul class="nav nav-tabs">
                                    <li class="active"><a href="#ltran" data-toggle="tab">1 этап</a></li>
                                    <li class=""><a href="#2tran" data-toggle="tab">2 этап</a></li>
                                    <li class=""><a href="#3tran" data-toggle="tab">3 этап</a></li>
                                    <li class=""><a href="#4tran" data-toggle="tab">4 этап</a></li>
                                </ul>
                                <div class="tab-content">
                                    <div class="tab-pane active" id="ltran">
                                        <p>
                                            Клиент устанавливает связь с сервером по назначенному номеру порта (по умолчанию - 80). <br>
                                            Затем клиент посылает запрос документа, указав HTTP-команду, называемую методом, адрес документа и номер версии HTTP. <br>
                                            Например, в запросе GET /index.html HTTP/1.0 используется метод GET, которым с помощью версии 1.0 HTTP запрашивается документ index.html.
                                        </p>
                                        <p></p>
                                    </div>
                                    <div class="tab-pane" id="2tran">
                                        <p>
                                            Клиент посылает информацию заголовка (необязательную), чтобы сообщить серверу информацию о своей конфигурации и данные о форматах документов, которые он может принимать. <br>
                                            Вся информация заголовка указывается построчно, при этом в каждой строке приводится имя и значение. <br>
                                            Например, приведенный ниже заголовок, посланный клиентом, содержит его имя и номер версии, а также информацию о некоторых предпочтительных для клиента типах документов: <br>
                                            User-Agent: Mozilla/4.05 (WinNT; 1) <br>
                                            Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */* <br>
                                            Завершается заголовок пустой строкой.
                                        </p>
                                        <pre class="prettyprint linenums"><ol class="linenums"><li class="L0"><span class="tag"><span class="tag">User-Agent: Mozilla/4.05 (WinNT; 1)</span></span></li><li class="L1"><span class="tag"><span class="tag">Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */* </span></span></li></ol></pre>
                                        <p></p>
                                    </div>
                                    <div class="tab-pane" id="3tran">
                                        <p>
                                             Послав запрос и заголовки, клиент может отправить и дополнительные данные. <br>
                                             Эти данные используются главным образом теми CGI-программами, которые применяют метод POST. <br>
                                             Клиенты (например, <i>Netscape Navigator-Gold</i>), также могут использовать их для помещения отредактированной страницы обратно на Web-сервер.
                                        </p>
                                        <p>
                                             Сервер отвечает на запрос клиента следующим образом:
                                            <ol>
                                                <li> 
                                                    <ul>
                                                        <li>Первая часть ответа сервера - строка состояния, содержащая три поля: версию HTTP, код состояния и описание. </li>
                                                        <li>Поле версии содержит номер версии HTTP, которой данный сервер пользуется для передачи ответа. </li>
                                                        <li>Код состояния - это трехразрядное число, обозначающее результат обработки сервером запроса клиента. </li>
                                                        <li>Описание, следующее за кодом состояния, представляет собой просто понятный для человека текст, поясняющий код состояния. </li>
                                                    </ul>
                                                </li>
                                               <br>
                                                <li> 
                                                    После строки состояния сервер передает клиенту информацию заголовка, содержащую данные о самом сервере и затребованном документе. <br>
                                                    Ниже приведен пример заголовка:<br>
                                                    <pre class="prettyprint linenums"><ol class="linenums"><li class="L0"><span class="tag"><span class="tag">Date: Fri, 10 Jan 2014 08:17:58 GMT)</span></span></li><li class="L1"><span class="tag"><span class="tag">erver: Apache/2.4</span></span><li class="L2"><span class="tag"><span class="tag">Last-modified: Mon, 12 Jun 2014 21:53:08 GMT</span></span><li class="L3"><span class="tag"><span class="tag">Content-type: text/html</span></span><li class="L4"><span class="tag"><span class="tag">Content-length: 2482</span></span></li></ol></pre>
                                                    Завершает заголовок пустая строка.
                                                </li>
                                            </ol>
                                                 
                                        </p>
                                        <p></p>
                                    </div>
                                    <div class="tab-pane" id="4tran">
                                        <p>
                                           Если запрос клиента успешен, то посылаются затребованные данные.<br>
                                           Это может быть копия файла или результат выполнения CGI-программы.
                                        </p>
                                        <p>
                                           Если запрос клиента удовлетворить нельзя, передаются дополнительные данные в виде понятного для пользователя разъяснения причин, по которым сервер не смог выполнить данный запрос.<br>
                                           В HTTP 1.0 за передачей сервером затребованных данных следует разъединение с клиентом, и транзакция считается завершенной, если не передан заголовок Connection: Keep Alive.<br>
                                           В HTTP 1.1 сервер по умолчанию не разрывает соединение и клиент может посылать другие запросы.
                                        </p>
                                        <p>
                                           Поскольку во многие документы встроены другие документы - изображения, кадры, апплеты и т.д.<br> 
                                           это позволяет сэкономить время и затраты клиента, которому в противном случае пришлось бы для получения всего одной страницы многократно соединяться с одним и тем же сервером.<br>
                                           Таким образом, в HTTP 1.1 транзакция может циклически повторяться, пока клиент или сервер не закроет соединение явно.
                                        </p>
                                        <p>
                                           HTTP не сохраняет информацию по транзакциям, поэтому в следующей транзакции приходится начинать все заново.<br>
                                           &nbsp;Преимущество состоит в том, что HTTP сервер может обслужить в заданный промежуток времени гораздо больше клиентов, ибо устраняются дополнительные расходы на отслеживание сеансов от одного соединения к другому.<br>
                                           &nbsp;Есть и недостаток: для сохранения информации по транзакциям более сложные CGI-программы должны пользоваться скрытыми полями ввода или внешними средствами, например "ключиками" (cookies) Netscape.<br>
  
                                        </p>
                                        <p></p>
                                    </div>
                                </div>
                            </div>
		</div>
                
            </div>
        </section>
        <section id="status_code">
            <div class="box box-info">
                <div class="box-header">
                    <h3 class="box-title">HTTP Status коды</h3>
		</div>
                
		<div class="box-body">
                    <table class="table table-hover">
                        <caption>Ответы в диапазоне 100-199 - информационные. Они показывают, что запрос клиента принят и обрабатывается.</caption>
                        <thead>
                            <tr class="info">
                                <th>Код</th>
                                <th width="180px">Краткое описание</th>
                                <th>Описание</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th scope="row">100</th>
                                <td>Continue</td>
                                <td>Cервер удовлетворён начальными сведениями о запросе, клиент может продолжать пересылать заголовки. <br>
                                    Появился в HTTP/1.1</td>
                            </tr>
                            <tr>
                                <th scope="row">101</th>
                                <td>Switching Protocols</td>
                                <td>Cервер предлагает перейти на более подходящий для указанного ресурса протокол; список предлагаемых протоколов сервер обязательно указывает в поле заголовка Update. <br>
                                    Если клиента это заинтересует, то он посылает новый запрос с указанием другого протокола. <br>
                                    Появился в HTTP/1.1</td>
                            </tr>
                            <tr>
                                <th scope="row">102</th>
                                <td>Processing</td>
                                <td>Pапрос принят, но на его обработку понадобится длительное время. <br>
                                    Используется сервером, чтобы клиент не разорвал соединение из-за превышения времени ожидания. <br>
                                    Клиент при получении такого ответа должен сбросить таймер и дожидаться следующей команды в обычном режиме. <br>
                                    Появился в WebDAV.</td>
                            </tr>
                            <tr>
                                <th scope="row">105</th>
                                <td>Name Not Resolved</td>
                                <td>При разрешении доменного имени возникла ошибка в связи с неверным или отсутствующем IP-адресом DNS-сервера</td>
                            </tr>
                        </tbody>
                    </table>
                    <hr>
                    <table class="table">
                        <caption>Ответы в диапазоне 200-299 означают, что запрос клиента обработан успешно.</caption>
                        <thead>
                            <tr class="success">
                                <th>Код</th>
                                <th width="180px">Краткое описание</th>
                                <th>Описание</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th scope="row">200</th>
                                <td>OK</td>
                                <td>Успешный запрос. Если клиентом были запрошены какие-либо данные, то они находятся в заголовке и/или теле сообщения. <br>
                                    Появился в HTTP/1.0.</td>
                            </tr>
                            <tr>
                                <th scope="row">201</th>
                                <td>Created</td>
                                <td>В результате успешного выполнения запроса был создан новый ресурс. Сервер должен указать его местоположение в заголовке Location. <br>
                                    Серверу рекомендуется[источник не указан 1054 дня] ещё указывать в заголовке характеристики созданного ресурса (например, в поле Content-Type). <br>
                                    Если сервер не уверен, что ресурс действительно будет существовать к моменту получения данного сообщения клиентом, то лучше использовать ответ с кодом 202. <br>
                                    Появился в HTTP/1.0.</td>
                            </tr>
                            <tr>
                                <th scope="row">202</th>
                                <td>Accepted</td>
                                <td>Запрос был принят на обработку, но она не завершена. <br>
                                    Клиенту не обязательно дожидаться окончательной передачи сообщения, так как может быть начат очень долгий процесс. <br>
                                    Появился в HTTP/1.0.</td>
                            </tr>
                            <tr>
                                <th scope="row">203</th>
                                <td>Non-Authoritative Information</td>
                                <td>Аналогично ответу 200, но в этом случае передаваемая информация была взята не из первичного источника (резервной копии, другого сервера и т. д.) и поэтому может быть неактуальной. <br>
                                    Появился в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">204</th>
                                <td>No Content</td>
                                <td>Сервер успешно обработал запрос, но в ответе были переданы только заголовки без тела сообщения. <br>
                                    Клиент не должен обновлять содержимое документа, но может применить к нему полученные метаданные. <br>
                                    Появился в HTTP/1.0.</td>
                            </tr>
                            <tr>
                                <th scope="row">205</th>
                                <td>Reset Content</td>
                                <td>Сервер обязывает клиента сбросить введённые пользователем данные. <br>
                                    Тела сообщения сервер при этом не передаёт и документ обновлять не обязательно. <br>
                                    Появился в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">206</th>
                                <td>Partial Content</td>
                                <td>Сервер удачно выполнил частичный GET-запрос, возвратив только часть сообщения. <br>
                                    В заголовке Content-Range сервер указывает байтовые диапазоны содержимого. <br>
                                    Особое внимание при работе с подобными ответами следует уделить кэшированию. <br>
                                    Появился в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">207</th>
                                <td>Multi-Status</td>
                                <td>Сервер передаёт результаты выполнения сразу нескольких независимых операций. <br>
                                    Они помещаются в само тело сообщения в виде XML-документа с объектом multistatus. <br>
                                    Не рекомендуется размещать в этом объекте статусы из серии 1xx из-за бессмысленности и избыточности. <br>
                                    Появился в WebDAV.</td>
                            </tr>
                            <tr>
                                <th scope="row">226</th>
                                <td>IM Used</td>
                                <td>Заголовок A-IM от клиента был успешно принят и сервер возвращает содержимое с учётом указанных параметров. <br>
                                    Введено в RFC 3229 для дополнения протокола HTTP поддержкой дельта-кодирования.</td>
                            </tr>
                        </tbody>
                    </table>
                    <hr>
                    <table class="table">
                        <caption>Код ответа в диапазоне 300-399 означает, что запрос не выполнен и клиенту нужно предпринять некоторые действия для удовлетворения запроса.</caption>
                        <thead>
                            <tr class="active">
                                <th>Код</th>
                                <th width="180px">Краткое описание</th>
                                <th>Описание</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th scope="row">300</th>
                                <td>Multiple Choices</td>
                                <td>По указанному URI существует несколько вариантов предоставления ресурса по типу MIME, по языку или по другим характеристикам. <br>
                                    Сервер передаёт с сообщением список альтернатив, давая возможность сделать выбор клиенту автоматически или пользователю. <br>
                                    Появился в HTTP/1.0.</td>
                            </tr>
                            <tr>
                                <th scope="row">301</th>
                                <td>Moved Permanently</td>
                                <td>Запрошенный документ был окончательно перенесен на новый URI, указанный в поле Location заголовка. <br>
                                    Некоторые клиенты некорректно ведут себя при обработке данного кода. <br>
                                    Появился в HTTP/1.0.</td>
                            </tr>
                            <tr>
                                <th scope="row">302</th>
                                <td>Found, 302 Moved Temporarily</td>
                                <td>Запрошенный документ временно доступен по другому URI, указанному в заголовке в поле Location. <br>
                                    Этот код может быть использован, например, при управляемом сервером согласовании содержимого. <br>
                                    Некоторые клиенты некорректно ведут себя при обработке данного кода. <br>
                                    Введено в HTTP/1.0.</td>
                            </tr>
                            <tr>
                                <th scope="row">303</th>
                                <td>See Other</td>
                                <td>Документ по запрошенному URI нужно запросить по адресу в поле Location заголовка с использованием метода GET несмотря даже на то, что первый запрашивался иным методом. <br>
                                    Этот код был введён вместе с 307-ым для избежания неоднозначности, чтобы сервер был уверен, что следующий ресурс будет запрошен методом GET. <br>
                                    Например, на веб-странице есть поле ввода текста для быстрого перехода и поиска. <br>
                                    После ввода данных браузер делает запрос методом POST, включая в тело сообщения введённый текст. <br>
                                    Если обнаружен документ с введённым названием, то сервер отвечает кодом 303, указав в заголовке Location его постоянный адрес. <br>
                                    Тогда браузер гарантировано его запросит методом GET для получения содержимого. <br>
                                    В противном случае сервер просто вернёт клиенту страницу с результатами поиска. <br>
                                    Введено в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">304</th>
                                <td>Not Modified</td>
                                <td>Сервер возвращает такой код, если клиент запросил документ методом GET, использовал заголовок If-Modified-Since или If-None-Match и документ не изменился с указанного момента. <br>
                                    При этом сообщение сервера не должно содержать тела. <br>
                                    Появился в HTTP/1.0.</td>
                            </tr>
                            <tr>
                                <th scope="row">305</th>
                                <td>Use Proxy</td>
                                <td>Запрос к запрашиваемому ресурсу должен осуществляться через прокси-сервер, URI которого указан в поле Location заголовка. <br>
                                    Данный код ответа могут использовать только исходные HTTP-сервера (не прокси). <br>
                                    Введено в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">306</th>
                                <td>зарезервировано</td>
                                <td>Использовавшийся раньше код ответа, в настоящий момент зарезервирован. <br>
                                    Упомянут в RFC 2616 (обновление HTTP/1.1).</td>
                            </tr>
                            <tr>
                                <th scope="row">307</th>
                                <td>Temporary Redirect</td>
                                <td>Запрашиваемый ресурс на короткое время доступен по другому URI, указанный в поле Location заголовка. <br>
                                    Этот код был введён вместе с 303 вместо 302-го для избежания неоднозначности. <br>
                                    Введено в RFC 2616 (обновление HTTP/1.1).</td>
                            </tr>
                            
                        </tbody>
                    </table>
                    <hr>
                    <table class="table">
                        <caption>Коды ответов в диапазоне 400-499 означают, что запрос клиента неполный. Эти коды могут также означать, что от клиента требуется дополнительная информация.</caption>
                        <thead>
                            <tr class="warning">
                                <th>Код</th>
                                <th width="180px">Краткое описание</th>
                                <th>Описание</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th scope="row">400</th>
                                <td>Bad Request</td>
                                <td>Сервер обнаружил в запросе клиента синтаксическую ошибку. <br>
                                    Появился в HTTP/1.0.</td>
                            </tr>
                            <tr>
                                <th scope="row">401</th>
                                <td>Unauthorized</td>
                                <td>Для доступа к запрашиваемому ресурсу требуется аутентификация. <br>
                                    В заголовке ответ должен содержать поле WWW-Authenticate с перечнем условий аутентификации. <br>
                                    Клиент может повторить запрос, включив в заголовок сообщения поле Authorization с требуемыми для аутентификации данными.</td>
                            </tr>
                            <tr>
                                <th scope="row">402</th>
                                <td>Payment Required</td>
                                <td>Предполагается использовать в будущем. В настоящий момент не используется. <br>
                                    Этот код предусмотрен для платных пользовательских сервисов, а не для хостинговых компаний. Имеется в виду, что эта ошибка не будет выдана хостинговым провайдером в случае просроченной оплаты его услуг. <br>
                                    Зарезервирован, начиная с HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">403</th>
                                <td>Forbidden</td>
                                <td>Сервер понял запрос, но он отказывается его выполнять из-за ограничений в доступе для клиента к указанному ресурсу. <br>
                                    Если для доступа к ресурсу требуется аутентификация средствами HTTP, то сервер вернёт ответ 401 или 407 при использовании прокси. <br>
                                    В противном случае ограничения были заданы администратором сервера или разработчиком веб-приложения и могут быть любыми в зависимости от возможностей используемого программного обеспечения. <br>
                                    В любом случае клиенту следует сообщить причины отказа в обработке запроса. <br>
                                    Наиболее вероятными причинами ограничения может послужить попытка доступа к системным ресурсам веб-сервера (например, файлам .htaccess или .htpasswd) или к файлам, доступ к которым был закрыт с помощью конфигурационных файлов, требование аутентификации не средствами HTTP, например, для доступа к системе управления содержимым или разделу для зарегистрированных пользователей либо сервер не удовлетворён IP-адресом клиента, например, при блокировках. <br>
                                    Появился в HTTP/1.0.</td>
                            </tr>
                            <tr>
                                <th scope="row">404</th>
                                <td>Not Found</td>
                                <td>Самая распространенная ошибка при пользовании Интернетом, основная причина — ошибка в написании адреса Web-страницы. <br>
                                    Сервер понял запрос, но не нашёл соответствующего ресурса по указанному URI. <br>
                                    Если серверу известно, что по этому адресу был документ, то ему желательно использовать код 410. <br>
                                    Ответ 404 может использоваться вместо 403, если требуется тщательно скрыть от посторонних глаз определённые ресурсы. <br>
                                    Появился в HTTP/1.0.</td>
                            </tr>
                            <tr>
                                <th scope="row">405</th>
                                <td>Method Not Allowed</td>
                                <td>Указанный клиентом метод нельзя применить к текущему ресурсу. <br>
                                    В ответе сервер должен указать доступные методы в заголовке Allow, разделив их запятой. <br>
                                    Эту ошибку сервер должен возвращать, если метод ему известен, но он не применим именно к указанному в запросе ресурсу, если же указанный метод не применим на всём сервере, то клиенту нужно вернуть код 501 (Not Implemented). <br>
                                    Появился в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">406</th>
                                <td>Not Acceptable</td>
                                <td>Запрошенный URI не может удовлетворить переданным в заголовке характеристикам. <br>
                                    Если метод был не HEAD, то сервер должен вернуть список допустимых характеристик для данного ресурса. <br>
                                    Появился в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">407</th>
                                <td>Proxy Authentication Required</td>
                                <td>Ответ аналогичен коду 401 за исключением того, что аутентификация производится для прокси-сервера. <br>
                                    Механизм аналогичен идентификации на исходном сервере. <br>
                                    Появился в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">408</th>
                                <td>Request Timeout</td>
                                <td>Время ожидания сервером передачи от клиента истекло. <br>
                                    Клиент может повторить аналогичный предыдущему запрос в любое время. <br>
                                    Например, такая ситуация может возникнуть при загрузке на сервер объёмного файла методом POST или PUT. <br>
                                    В какой-то момент передачи источник данных перестал отвечать, например, из-за повреждения компакт-диска или потери связи с другим компьютером в локальной сети. <br>
                                    Пока клиент ничего не передаёт, ожидая от него ответа, соединение с сервером держится. <br>
                                    Через некоторое время сервер может закрыть соединение со своей стороны, чтобы дать возможность другим клиентам сделать запрос. <br>
                                    Этот ответ не возвращается, когда клиент принудительно остановил передачу по команде пользователя или соединение прервалось по каким-то иным причинам, так как ответ уже послать невозможно. <br>
                                    Появился в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">409</th>
                                <td>Conflict</td>
                                <td>Запрос не может быть выполнен из-за конфликтного обращения к ресурсу. <br>
                                    Такое возможно, например, когда два клиента пытаются изменить ресурс с помощью метода PUT.<br>
                                    Появился в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">410</th>
                                <td>Gone</td>
                                <td>Такой ответ сервер посылает, если ресурс раньше был по указанному URL, но был удалён и теперь недоступен. <br>
                                    Серверу в этом случае неизвестно и местоположение альтернативного документа, например, копии). <br>
                                    Если у сервера есть подозрение, что документ в ближайшее время может быть восстановлен, то лучше клиенту передать код 404. <br>
                                    Появился в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">411</th>
                                <td>Length Required</td>
                                <td>Для указанного ресурса клиент должен указать Content-Length в заголовке запроса. <br>
                                    Без указания этого поля не стоит делать повторную попытку запроса к серверу по данному URI. <br>
                                    Такой ответ естественен для запросов типа POST и PUT. Например, если по указанному URI производится загрузка файлов, а на сервере стоит ограничение на их объём. <br>
                                    Тогда разумней будет проверить в самом начале заголовок Content-Length и сразу отказать в загрузке, чем провоцировать бессмысленную нагрузку, разрывая соединение, когда клиент действительно пришлёт слишком объёмное сообщение. <br>
                                    Появился в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">412</th>
                                <td>Precondition Failed</td>
                                <td>Возвращается, если ни одно из условных полей заголовка запроса не было выполнено. Появился в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">413</th>
                                <td>Request Entity Too Large</td>
                                <td>Возвращается в случае, если сервер отказывается обработать запрос по причине слишком большого размера тела запроса. <br>
                                    Сервер может закрыть соединение, чтобы прекратить дальнейшую передачу запроса. <br>
                                    Если проблема временная, то рекомендуется в ответ сервера включить заголовок Retry-After с указанием времени, по истечении которого можно повторить аналогичный запрос. <br>
                                    Появился в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">414</th>
                                <td>Request-URL Too Long</td>
                                <td>Сервер не может обработать запрос из-за слишком длинного указанного URL. <br>
                                    Такую ошибку можно спровоцировать, например, когда клиент пытается передать длинные параметры через метод GET, а не POST. <br>
                                    Появился в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">415</th>
                                <td>Unsupported Media Type</td>
                                <td>По каким-то причинам сервер отказывается работать с указанным типом данных при данном методе. <br>
                                    Появился в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">416</th>
                                <td>Requested Range Not Satisfiable</td>
                                <td>В поле Range заголовка запроса был указан диапазон за пределами ресурса и отсутствует поле If-Range. <br>
                                    Если клиент передал байтовый диапазон, то сервер может вернуть реальный размер в поле Content-Range заголовка. <br>
                                    Данный ответ не следует использовать при передаче типа multipart/byteranges. <br>
                                    Введено в RFC 2616 (обновление HTTP/1.1).</td>
                            </tr>
                            <tr>
                                <th scope="row">417</th>
                                <td>Expectation Failed</td>
                                <td>По каким-то причинам сервер не может удовлетворить значению поля Expect заголовка запроса. <br>
                                    Введено в RFC 2616 (обновление HTTP/1.1).</td>
                            </tr>
                            <tr>
                                <th scope="row">418</th>
                                <td>I'm a teapot</td>
                                <td>Этот код был введен в 1998 году как одна из традиционных первоапрельских шуток IETF в RFC 2324, Hyper Text Coffee Pot Control Protocol. <br>
                                    Не ожидается, что данный код будет поддерживаться реальными серверами.</td>
                            </tr>
                            <tr>
                                <th scope="row">422</th>
                                <td>Unprocessable Entity</td>
                                <td>Сервер успешно принял запрос, может работать с указанным видом данных, в теле запроса XML-документ имеет верный синтаксис, но имеется какая-то логическая ошибка, из-за которой невозможно произвести операцию над ресурсом. <br>
                                    Введено в WebDAV.</td>
                            </tr>
                            <tr>
                                <th scope="row">423</th>
                                <td>Locked</td>
                                <td>Целевой ресурс из запроса заблокирован от применения к нему указанного метода. <br>
                                    Введено в WebDAV.</td>
                            </tr>
                            <tr>
                                <th scope="row">424</th>
                                <td>Failed Dependency</td>
                                <td>Реализация текущего запроса может зависеть от успешности выполнения другой операции. <br>
                                    Если она не выполнена и из-за этого нельзя выполнить текущий запрос, то сервер вернёт этот код. <br>
                                    Введено в WebDAV.</td>
                            </tr>
                            <tr>
                                <th scope="row">425</th>
                                <td>Unordered Collection</td>
                                <td>Используется в расширении WebDAV Advanced Collections Protocol. <br>
                                    Посылается, если клиент указал номер элемента в неупорядоченном списке, или запросил несколько элементов в порядке, отличающемся от серверного.</td>
                            </tr>
                            <tr>
                                <th scope="row">426</th>
                                <td>Upgrade Required</td>
                                <td>Сервер указывает клиенту на необходимость обновить протокол. <br>
                                    Заголовок ответа должен содержать правильно сформированные поля Upgrade и Connection. <br>
                                    Введено в RFC 2817 для возможности перехода к TLS посредством HTTP.</td>
                            </tr>
                            <tr>
                                <th scope="row">428</th>
                                <td>Precondition Required</td>
                                <td>Сервер указывает клиенту на необходимость использования в запросе заголовков условий, наподобие If-Match. <br>
                                    Введено в черновике стандарта RFC 6585.</td>
                            </tr>
                            <tr>
                                <th scope="row">429</th>
                                <td>Too Many Requests</td>
                                <td>Клиент попытался отправить слишком много запросов за короткое время, что может указывать, например, на попытку DoS-атаки. <br>
                                    Может сопровождаться заголовком Retry-After, указывающим, через какое время можно повторить запрос. <br>
                                    Введено в черновике стандарта RFC 6585.</td>
                            </tr>
                            <tr>
                                <th scope="row">431</th>
                                <td>Request Header Fields Too Large</td>
                                <td>Превышена допустимая длина заголовков. <br>
                                    Сервер не обязан отвечать этим кодом, вместо этого он может просто сбросить соединение. <br>
                                    Введено в черновике стандарта RFC 6585. </td>
                            </tr>
                            <tr>
                                <th scope="row">434</th>
                                <td>Requested host unavailable</td>
                                <td>Запрашиваемый адрес недоступен.</td>
                            </tr>
                            <tr>
                                <th scope="row">449</th>
                                <td>Retry With</td>
                                <td>Возвращается сервером, если для обработки запроса от клиента поступило недостаточно информации. <br>
                                    При этом в заголовок ответа помещается поле Ms-Echo-Request. <br>
                                    Введено корпорацией Microsoft для WebDAV. В настоящий момент как минимум используется программой Microsoft Money...</td>
                            </tr>
                            <tr>
                                <th scope="row">451</th>
                                <td>Unavailable For Legal Reasons</td>
                                <td>Доступ к ресурсу закрыт по юридическим причинам, например, по требованию органов государственной власти или по требованию правообладателя в случае нарушения авторских прав. <br>
                                    Введено в черновике IETF за авторством Google, при этом код ошибки является отсылкой к роману Рэя Брэдбери «451 градус по Фаренгейту».</td>
                            </tr>
                            <tr>
                                <th scope="row">456</th>
                                <td>Unrecoverable Error</td>
                                <td>Возвращается сервером, если обработка запроса вызывает некорректируемые сбои в таблицах баз данных. <br>
                                    Введено корпорацией Microsoft для WebDAV.</td>
                            </tr>
                        </tbody>
                    </table>
                    <hr>
                    <table class="table">
                        <caption>Коды ответов в диапазоне 500-599 показывают, что сервер столкнулся с ошибкой и, вероятно, не сможет выполнить запрос клиента.</caption>
                        <thead>
                            <tr class="danger">
                                <th>Код</th>
                                <th width="180px">Краткое описание</th>
                                <th>Описание</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th scope="row">500</th>
                                <td>Internal Server Error</td>
                                <td>Любая внутренняя ошибка сервера, которая не входит в рамки остальных ошибок класса. Появился в HTTP/1.0.</td>
                            </tr>
                            <tr>
                                <th scope="row">501</th>
                                <td>Not Implemented</td>
                                <td>Сервер не поддерживает возможностей, необходимых для обработки запроса. <br>
                                    Типичный ответ для случаев, когда сервер не понимает указанный в запросе метод. <br>
                                    Если же метод серверу известен, но он не применим к данному ресурсу, то нужно вернуть ответ 405. <br>
                                    Появился в HTTP/1.0.</td>
                            </tr>
                            <tr>
                                <th scope="row">502</th>
                                <td>Bad Gateway</td>
                                <td>Сервер, выступая в роли шлюза или прокси-сервера, получил недействительное ответное сообщение от вышестоящего сервера. <br>
                                    Появился в HTTP/1.0. 503 Service Unavailable — сервер временно не имеет возможности обрабатывать запросы по техническим причинам (обслуживание, перегрузка и прочее).<br>
                                    В поле Retry-After заголовка сервер может указать время, через которое клиенту рекомендуется повторить запрос. <br>
                                    Хотя во время перегрузки очевидным кажется сразу разрывать соединение, эффективней может оказаться установка большого значения поля Retry-After для уменьшения частоты избыточных запросов. <br>
                                    Появился в HTTP/1.0.</td>
                            </tr>
                            <tr>
                                <th scope="row">503</th>
                                <td>Service Unavailable</td>
                                <td>Сервер временно не имеет возможности обрабатывать запросы по техническим причинам (обслуживание, перегрузка и прочее). <br>
                                    В поле Retry-After заголовка сервер может указать время, через которое клиенту рекомендуется повторить запрос. <br>
                                    Хотя во время перегрузки очевидным кажется сразу разрывать соединение, эффективней может оказаться установка большого значения поля Retry-After для уменьшения частоты избыточных запросов. <br>
                                    Появился в HTTP/1.0.</td>
                            </tr>
                            <tr>
                                <th scope="row">504</th>
                                <td>Gateway Timeout</td>
                                <td>Сервер в роли шлюза или прокси-сервера не дождался ответа от вышестоящего сервера для завершения текущего запроса. <br>
                                    Появился в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">505</th>
                                <td>HTTP Version Not Supported</td>
                                <td>Сервер не поддерживает или отказывается поддерживать указанную в запросе версию протокола HTTP. <br>
                                    Появился в HTTP/1.1.</td>
                            </tr>
                            <tr>
                                <th scope="row">506</th>
                                <td>Variant Also Negotiates</td>
                                <td>В результате ошибочной конфигурации выбранный вариант указывает сам на себя, из-за чего процесс связывания прерывается. <br>
                                    Экспериментальное. Введено в RFC 2295 для дополнения протокола HTTP технологией Transparent Content Negotiation.</td>
                            </tr>
                            <tr>
                                <th scope="row">507</th>
                                <td>Insufficient Storage</td>
                                <td>Не хватает места для выполнения текущего запроса. <br>
                                    Проблема может быть временной. <br>
                                    Введено в WebDAV.</td>
                            </tr>
                            <tr>
                                <th scope="row">509</th>
                                <td>Bandwidth Limit Exceeded</td>
                                <td>Используется при превышении веб-площадкой отведённого ей ограничения на потребление трафика. <br>
                                    В данном случае владельцу площадки следует обратиться к своему хостинг-провайдеру. <br>
                                    В настоящий момент данный код не описан ни в одном RFC и используется только модулем «bw/limited», входящим в панель управления хостингом cPanel, где и был введён. <br>
                                    510 Not Extended — на сервере отсутствует расширение, которое желает использовать клиент. <br>
                                    Сервер может дополнительно передать информацию о доступных ему расширениях. <br>
                                    Введено в RFC 2774 для дополнения протокола HTTP поддержкой расширений.</td>
                            </tr>
                            <tr>
                                <th scope="row">510</th>
                                <td>Not Extended</td>
                                <td>На сервере отсутствует расширение, которое желает использовать клиент. <br>
                                    Сервер может дополнительно передать информацию о доступных ему расширениях. <br>
                                    Введено в RFC 2774 для дополнения протокола HTTP поддержкой расширений.</td>
                            </tr>
                            <tr>
                                <th scope="row">511</th>
                                <td>Network Authentication Required</td>
                                <td>Этот ответ посылается не сервером, которому был предназначен запрос, а сервером-посредником — например, сервером провайдера — в случае, если клиент должен сначала авторизоваться в сети, например, ввести пароль для платной точки доступа к Интернету. <br>
                                    Предполагается, что в теле ответа будет возвращена Web-форма авторизации или перенаправление на неё. <br>
                                    Введено в черновике стандарта RFC 6585.</td>
                            </tr>
                        </tbody>
                    </table>
		</div>
                
            </div>
        </section>
        <section id="header-method">
            <div class="box box-info">
                <div class="box-header">
                    <h3 class="box-title">HTTP методы и заголовки</h3>
		</div>
                
		<div class="box-body">
                    <p> 
                        
                    </p>
                    <div class="bs-example">
                        <ul class="nav nav-tabs" style="margin-bottom: 15px;">
                            <li class="active"><a href="#method" data-toggle="tab">Методы</a></li>
                            <li><a href="#header" data-toggle="tab">Заголовки</a></li>
                        </ul>
                        <div id="myTabContent" class="tab-content">
                            <div class="tab-pane fade active in" id="method">
                                <div class="box box-solid">
                                    <div class="box-body">
                                        <p>
                                            Метод HTTP (англ. HTTP Method) — последовательность из любых символов, кроме управляющих и разделителей, указывающая на основную операцию над ресурсом. <br>
                                            Обычно метод представляет собой короткое английское слово, записанное заглавными буквами. <br>
                                            Обратите внимание, что <u>название метода чувствительно к регистру</u>.<hr>
                                        </p>
                                        <div class="tabbable tabs-left">
                                            <ul class="nav nav-tabs" style="margin-bottom: 15px;">
                                                <li class="active"><a href="#get" data-toggle="tab">GET</a></li>
                                                <li><a href="#OPTIONS" data-toggle="tab">OPTIONS</a></li>
                                                <li><a href="#HEAD" data-toggle="tab">HEAD</a></li>
                                                <li><a href="#CONNECT" data-toggle="tab">CONNECT</a></li>
                                                <li><a href="#PUT" data-toggle="tab">PUT</a></li>
                                                <li><a href="#PATCH" data-toggle="tab">PATCH</a></li>
                                                <li><a href="#DELETE" data-toggle="tab">DELETE</a></li>
                                                <li><a href="#TRACE" data-toggle="tab">TRACE</a></li>
                                                <li><a href="#CONNECT" data-toggle="tab">CONNECT</a></li>
                                            </ul>
                                            <div id="MethodTabs" class="tab-content">
                                                <div class="tab-pane fade active in" id="get">
                                                    <div class="box box-solid">
                                                        <div class="box-body">
                                                            <p>
                                                                Что нужно сделать. <br>
                                                                Это называется методом HTTP и звучит приблизительно так: <br>
                                                                "<i>Дай мне информацию, находящуюся в /status.php, и вышли ее, используя протокол HTTP 1.1</i>".
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="tab-pane fade" id="OPTIONS">
                                                    <div class="box box-solid">
                                                        <div class="box-body">
                                                            <p>
                                                                Используется для определения возможностей веб-сервера или параметров соединения для конкретного ресурса. <br>
                                                                В ответ серверу следует включить заголовок Allow со списком поддерживаемых методов. <br>
                                                                Также в заголовке ответа может включаться информация о поддерживаемых расширениях.
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="tab-pane fade" id="HEAD">
                                                    <div class="box box-solid">
                                                        <div class="box-body">
                                                            <p>
                                                                Аналогичен методу GET, за исключением того, что в ответе сервера отсутствует тело. <br>
                                                                Запрос HEAD обычно применяется для извлечения метаданных, проверки наличия ресурса (валидация URL) и чтобы узнать, не изменился ли он с момента последнего обращения.
                                                            </p>
                                                            <p>
                                                                Заголовки ответа могут кэшироваться. <br>
                                                                При несовпадении метаданных ресурса с соответствующей информацией в кэше копия ресурса помечается как устаревшая.
                                                            </p>
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="tab-pane fade" id="POST">
                                                    <div class="box box-solid">
                                                        <div class="box-body">
                                                            <p>
                                                                Применяется для передачи пользовательских данных заданному ресурсу. <br>
                                                                Например, в блогах посетители обычно могут вводить свои комментарии к записям в HTML-форму, после чего они передаются серверу методом POST и он помещает их на страницу. <br>
                                                                При этом передаваемые данные (в примере с блогами — текст комментария) включаются в тело запроса. <br>
                                                                Аналогично с помощью метода POST обычно загружаются файлы на сервер.
                                                            </p>
                                                            <p>
                                                                В отличие от метода GET, метод POST не считается идемпотентным, то есть многократное повторение одних и тех же запросов POST может возвращать разные результаты (например, после каждой отправки комментария будет появляться очередная копия этого комментария).
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="tab-pane fade" id="PUT">
                                                    <div class="box box-solid">
                                                        <div class="box-body">
                                                            <p>
                                                                Применяется для загрузки содержимого запроса на указанный в запросе URI. <br>,
                                                                Если по заданному URI не существовало ресурса, то сервер создаёт его и возвращает статус 201 (Created). <br>
                                                                Если же был изменён ресурс, то сервер возвращает 200 (Ok) или 204 (No Content). <br>
                                                                Сервер не должен игнорировать некорректные заголовки Content-*, передаваемые клиентом вместе с сообщением. <br>
                                                                Если какой-то из этих заголовков не может быть распознан или не допустим при текущих условиях, то необходимо вернуть код ошибки 501 (Not Implemented).
                                                            </p>
                                                            <p>
                                                                Фундаментальное различие методов POST и PUT заключается в понимании предназначений URI ресурсов. <br>
                                                                Метод POST предполагает, что по указанному URI будет производиться обработка передаваемого клиентом содержимого. <br>
                                                                Используя PUT, клиент предполагает, что загружаемое содержимое соответствует находящемуся по данному URI ресурсу.
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="tab-pane fade" id="PATCH">
                                                    <div class="box box-solid">
                                                        <div class="box-body">
                                                            <p>
                                                                Аналогично PUT, но применяется только к фрагменту ресурса.
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="tab-pane fade" id="DELETE">
                                                    <div class="box box-solid">
                                                        <div class="box-body">
                                                            <p>
                                                                Удаляет указанный ресурс.
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="tab-pane fade" id="TRACE">
                                                    <div class="box box-solid">
                                                        <div class="box-body">
                                                            <p>
                                                                Возвращает полученный запрос так, что клиент может увидеть, какую информацию промежуточные серверы добавляют или изменяют в запросе.
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="tab-pane fade" id="CONNECT">
                                                    <div class="box box-solid">
                                                        <div class="box-body">
                                                            <p>
                                                                Преобразует соединение запроса в прозрачный TCP/IP туннель, обычно чтобы содействовать установлению защищенного SSL соединения через нешифрованный прокси.
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="tab-pane fade" id="header">
                                <div class="box box-solid">
                                    <div class="box-body">
                                        <p>
                                            <b>В списке приведено несколько загаловков, на самом деле их больше 60 </b><hr>
                                        </p>
                                        <div class="tabbable tabs-left">
                                            <ul class="nav nav-tabs" style="margin-bottom: 15px;">
                                                <li class="active"><a href="#Accept" data-toggle="tab">Accept</a></li>
                                                <li><a href="#Accept-Language" data-toggle="tab">Accept-Language</a></li>
                                                <li><a href="#Accept-Encoding" data-toggle="tab">Accept-Encoding</a></li>
                                                <li><a href="#User-Agent" data-toggle="tab">User-Agent</a></li>
                                                <li><a href="#Host" data-toggle="tab">Host</a></li>
                                                <li><a href="#Connection" data-toggle="tab">Connection</a></li>
                                            </ul>
                                            <div id="HeaderTabs" class="tab-content">
                                                <div class="tab-pane fade active in" id="Accept">
                                                    <div class="box box-solid">
                                                        <div class="box-body">
                                                            <p>"<i>Я могу понимать информацию в следующих форматах</i>"</p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="tab-pane fade" id="Accept-Language">
                                                    <div class="box box-solid">
                                                        <div class="box-body">
                                                            <p>
                                                                "<i>Язык, который я понимаю — английский, американский диалект</i>". <br>
                                                                Это позволяет серверу отправлять в ответ разное содержимое в соответствии с указанным языком.
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="tab-pane fade" id="Accept-Encoding">
                                                    <div class="box box-solid">
                                                        <div class="box-body">
                                                            <p>
                                                                "<i>Мне можно отправлять данные в сжатом виде, поскольку я понимаю типы сжатия gzip и deflate</i>".<br><br>
                                                                Вы должны понимать, что хотя браузер воспринимает сжатие, сервер не будет использовать его автоматически. <br>
                                                                Большинство серверов в Internet не сжимают передаваемую информацию, если только администратор специально не включит сжатие.
                                                            </p>    
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="tab-pane fade" id="User-Agent">
                                                    <div class="box box-solid">
                                                        <div class="box-body">
                                                            <p>
                                                                "<i>Тип моего браузера — Microsoft Explorer 10, выполняющийся под управлением Windows 10</i>"
                                                            </p>    
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="tab-pane fade" id="Host">
                                                    <div class="box box-solid">
                                                        <div class="box-body">
                                                            <p>
                                                                "<i>Доставь мне информацию /status.php с компьютера, находящегося на feedster.com</i>"
                                                            </p>    
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="tab-pane fade" id="Connection">
                                                    <div class="box box-solid">
                                                        <div class="box-body">
                                                            <p>
                                                                "<i>Держи подключение HTTP открытым, пока браузер не закроет его</i>". <br>
                                                                Это повышает производительность, поскольку соединение не нужно закрывать (и впоследствии снова открывать) для каждого подключения. <br>
                                                                Без Keep-Alive Web-страница с тремя изображениями на ней технически будет иметь четыре подключения(для http1.1) (по одному для каждой картинки и одно — для самой страницы).
                                                            </p>    
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>  
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <section id="info">
            <div class="box box-info">
                <div class="box-header">
                    <h3 class="box-title">Информация</h3>
		</div>
                
		<div class="box-body">
                    <p>
                        
                    </p>
                    <div class="row-fluid">
                        <ul class="thumbnails">
                            <li class="span4">
                                <div class="thumbnail" align="center">
                                    <h3>Густенева Дарья</h3>
                                    <img src="/img/_dg.jpg" alt="">
                                        <div class="caption">
                                            
                                            <a href="https://github.com/DashaGusteneva/Web-prilogenia" target="_blank" class="btn btn-info btn-large"><i class="icon-fire"></i> Репозиторий на GitHub</a>
                                        </div>
                                </div>
                            </li>
                            <li class="span4">
                                <div class="thumbnail" align="center">
                                    <h3>Сохинова Виктория</h3>
                                    <img src="http://placehold.it/300x200" alt="">
                                        <div class="caption">
                                            <a href="https://github.com/Vika-Sokhinova/Web-pril" target="_blank" class="btn btn-info btn-large"><i class="icon-fire"></i> Репозиторий на GitHub</a>
                                        </div>
                                </div>
                            </li>                            
                            <li class="span4">
                                <div class="thumbnail" align="center">
                                    <h3>Бурцев Юрий</h3>
                                    <img src="/img/_yb.jpg" alt="">
                                        <div class="caption">
                                            <a href="https://github.com/intobs/dev_web_urfu" target="_blank" class="btn btn-info btn-large"><i class="icon-fire"></i> Репозиторий на GitHub</a>
                                        </div>
                                </div>
                            </li>
                        </ul>
                    </div>
		</div>
                
            </div>
        </section>
        </div>
      </div>
    </div>


    <script src="/js/bootstrap.min.js"></script>
    
  </body>
</html>